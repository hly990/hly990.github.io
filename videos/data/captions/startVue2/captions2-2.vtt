WEBVTT
Kind: captions
Language: zh-CN

00:00:00.775 --> 00:00:02.265
这一节我们来学习Vue实例的生命周期

00:00:02.895 --> 00:00:05.855
学习怎么使用像mounted这样的Hook

00:00:05.855 --> 00:00:08.995
使用Hook的功能和其它有用的功能

00:00:08.995 --> 00:00:12.055
在哪个时间点使用

00:00:12.055 --> 00:00:15.095
 

00:00:15.965 --> 00:00:18.905
 

00:00:18.905 --> 00:00:22.185
页面上是vue实例生命周期图

00:00:22.185 --> 00:00:25.155
它描述了新视图实例从开始到结束

00:00:25.155 --> 00:00:28.135
这一节也会包含之前视频讲过的知识点

00:00:28.135 --> 00:00:30.925
我们在图上会看到不同颜色的模块

00:00:30.925 --> 00:00:33.875
这些颜色都是有意义的

00:00:33.875 --> 00:00:36.185
绿色是表示发生了什么

00:00:36.185 --> 00:00:38.525
在图上第一个绿色模块旁边有两个红色模块

00:00:38.525 --> 00:00:41.055
这是表示事件触发的Hook

00:00:41.055 --> 00:00:43.935
我们可以在编写视图实例时候访问

00:00:43.935 --> 00:00:47.255
 

00:00:47.255 --> 00:00:50.255
所以一个是在创造实例前调用

00:00:50.255 --> 00:00:53.595
一个在创建实例调用

00:00:53.615 --> 00:00:56.045
我们之前视频也使用到了Hook功能

00:00:56.045 --> 00:00:59.095
 

00:00:59.095 --> 00:01:00.685
 

00:01:00.685 --> 00:01:03.335
Vue实例被创建后

00:01:03.335 --> 00:01:04.885
它在页面任何地方都看不到

00:01:05.235 --> 00:01:08.245
 

00:01:08.245 --> 00:01:11.015
这些内容在之前视频用到过

00:01:11.255 --> 00:01:14.305
它有一个el选项，

00:01:14.305 --> 00:01:17.045
有或没有el属性会有两个分支

00:01:17.045 --> 00:01:20.025
如果选择否，则视图实例会通过$mount函数挂载

00:01:20.025 --> 00:01:23.245
 

00:01:23.345 --> 00:01:26.385
 

00:01:26.385 --> 00:01:28.155
接下来它有一个template选项

00:01:28.155 --> 00:01:30.965
如果是在单文件组件中

00:01:30.965 --> 00:01:32.795
它就是里面的template代码块

00:01:33.475 --> 00:01:36.535
 

00:01:36.535 --> 00:01:39.615
进一步向下看，如果选择是，将template模板编译生成渲染函数，然后再渲染DOM树

00:01:39.615 --> 00:01:43.075
否则，会通过el属性获取挂载元素的outerHTML来作为模板，并编译生成渲染函数。

00:01:43.275 --> 00:01:46.445
实际上达到服务端的数据呈现，用它作为模板

00:01:46.445 --> 00:01:47.915
 

00:01:49.105 --> 00:01:52.005
我们再进入下一个核心功能

00:01:52.005 --> 00:01:54.965
如果你需要在视图挂载到el之前修改视图里面的内容

00:01:54.965 --> 00:01:58.055
需要在beforeMount Hook里面写函数处理

00:01:58.055 --> 00:01:59.935
 

00:01:59.935 --> 00:02:02.435
这是一个很好的机制

00:02:03.155 --> 00:02:05.485
确保我们能够动态修改视图

00:02:05.485 --> 00:02:07.865
 

00:02:07.865 --> 00:02:10.535
接下来，我们进入大家最关心的点

00:02:10.535 --> 00:02:11.925
因为通过它让视图在页面上可见

00:02:12.385 --> 00:02:15.325
我看看到图中这个Mounted大红点

00:02:15.325 --> 00:02:17.925
这就是视图实例挂载后的状态

00:02:17.925 --> 00:02:20.815
你可能会花主要时间去处理

00:02:20.815 --> 00:02:23.795
因为在Mounted下呈现页面内容

00:02:23.795 --> 00:02:26.865
你可以用它进行交互

00:02:26.865 --> 00:02:29.765
比如页面有一个表格，你可以输入一些东西，看看它是否生效

00:02:30.265 --> 00:02:33.015
还比如验证之类的东西

00:02:33.195 --> 00:02:36.205
然后我们有另外一个有趣的事情，就是数据更新时调用

00:02:36.205 --> 00:02:39.315
当数据发生改变时候

00:02:39.315 --> 00:02:40.775
有beforeUpdate和updated两个Hook可以拦截处理

00:02:41.435 --> 00:02:44.165
数据发生改变时，你可以保存到组件，也可以从服务端获取数据显示在组件

00:02:44.165 --> 00:02:46.935
从数据发生改变到组件在页面展示

00:02:46.935 --> 00:02:49.655
你可以将一些数据保存到组件

00:02:49.655 --> 00:02:52.325
或从服务器请求数据显示在你的视图组件

00:02:52.325 --> 00:02:53.895
因为有这两个Hook，你可以做什么事

00:02:54.325 --> 00:02:56.575
这取决于你的实际需求

00:02:56.575 --> 00:02:59.185
 

00:02:59.435 --> 00:03:00.435
 

00:03:00.695 --> 00:03:03.275
这里还需要注意beforeDestory

00:03:03.275 --> 00:03:05.845
很明显，Destory后组件就不可见了

00:03:05.845 --> 00:03:08.805
 

00:03:08.805 --> 00:03:11.915
 

00:03:11.915 --> 00:03:14.965
 

00:03:14.965 --> 00:03:17.915
 

00:03:17.915 --> 00:03:20.615
 

00:03:20.615 --> 00:03:22.515
 

00:03:23.015 --> 00:03:25.085
 

00:03:25.085 --> 00:03:28.115
你可以在beforDestory时候，移除那些自己设置的监听器

00:03:28.115 --> 00:03:30.405
 

00:03:30.405 --> 00:03:33.735
 

00:03:34.375 --> 00:03:37.215
 

00:03:37.215 --> 00:03:38.215
现在我们用一个例子来展示

00:03:38.395 --> 00:03:41.185
页面就是例子显示的效果

00:03:41.185 --> 00:03:42.315
它有一个标题，一个按钮，一些图片

00:03:42.925 --> 00:03:46.235
 

00:03:47.175 --> 00:03:48.675
我们切换到代码部分

00:03:49.155 --> 00:03:52.185
 

00:03:52.185 --> 00:03:54.385
你可以看到代码中定义的标题

00:03:54.385 --> 00:03:57.305
按钮视图组件和图片视图组件

00:03:57.305 --> 00:03:58.795
 

00:03:59.685 --> 00:04:01.575
我们往下看

00:04:01.895 --> 00:04:05.025
 

00:04:05.025 --> 00:04:06.045
我已经把全部生命周期功能都列出来了

00:04:06.805 --> 00:04:09.855
所以我们可以在创建之前做点什么

00:04:09.855 --> 00:04:13.005
 

00:04:13.195 --> 00:04:16.055
我们选择用console.log函数打印状态名称

00:04:16.055 --> 00:04:19.245
 

00:04:19.705 --> 00:04:21.935
这样每次状态变化都能在控制台看到

00:04:21.935 --> 00:04:23.935
回到浏览器我们看看结果

00:04:25.105 --> 00:04:28.245
我们打开浏览器的控制台

00:04:29.995 --> 00:04:32.925
刷新页面，现在能在控制台看到它

00:04:33.055 --> 00:04:35.835
在mount之前，创建函数被调用

00:04:35.835 --> 00:04:36.985
 

00:04:37.415 --> 00:04:40.545
 

00:04:40.655 --> 00:04:42.375
 

00:04:44.325 --> 00:04:50.875
我们点击这个按钮看看发生了什么？

00:04:51.015 --> 00:04:52.985
 

00:04:53.325 --> 00:04:55.845
我们在这个方法里面设置改变标题

00:04:55.845 --> 00:04:58.825
 

00:04:59.165 --> 00:05:01.595
标题我们可以在数组中看到

00:05:01.995 --> 00:05:04.925
目前它被命令为我的画廊

00:05:04.925 --> 00:05:07.225
如果是图片，这不是个好名字

00:05:07.225 --> 00:05:08.995
 

00:05:09.345 --> 00:05:12.355
我们添加一个点击处理函数

00:05:12.355 --> 00:05:15.335
有人点击，请运行改变标题功能

00:05:15.335 --> 00:05:18.325
我们现在点击按钮，看看右边输出什么

00:05:18.325 --> 00:05:20.675
 

00:05:20.995 --> 00:05:23.875
右边可以看到输出结果

00:05:23.875 --> 00:05:24.875
在更新和更新前改变

00:05:25.185 --> 00:05:28.665
 

00:05:29.115 --> 00:05:32.045
所以你可以看到标题改变了

00:05:32.045 --> 00:05:35.075
vue知道我要改变数据对象和对象中的某些内容

00:05:35.075 --> 00:05:37.135
 

00:05:37.485 --> 00:05:40.015
 

00:05:40.015 --> 00:05:43.005
你可以在更新DOM之前修改数据内容

00:05:43.005 --> 00:05:45.695
 

00:05:45.695 --> 00:05:48.045
也可以在更新DOM的时候修改内容

00:05:48.045 --> 00:05:51.015
 

00:05:51.015 --> 00:05:53.435
 

00:05:54.285 --> 00:05:56.605
 

00:05:56.655 --> 00:05:59.125
这一节我们学了Vue实例的生命周期

00:05:59.125 --> 00:06:02.525
首先要创建一个Vue实例

00:06:02.665 --> 00:06:05.525
 

00:06:05.525 --> 00:06:08.535
再触发你编写的功能

00:06:08.535 --> 00:06:11.435
通过更改数据，更新视图组件的展示

00:06:11.895 --> 00:06:14.825
下一节我们学习怎么使用组件

00:06:14.825 --> 00:06:17.225
 

